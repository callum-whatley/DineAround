{"version":3,"sources":["components/business/business.js","components/businessList/businessList.js","components/searchBar/auto.js","components/searchBar/searchBar.js","util/Yelp.js","App.js","serviceWorker.js","index.js"],"names":["Business","className","href","this","props","business","url","target","rel","src","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","console","log","key","id","LocationSearchInput","handleChange","setState","handleSelect","locationSuggestion","document","getElementsByClassName","value","handleEnter","event","handleSearch","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","onKeyDown","suggestion","active","description","SearchBar","term","location","sortBy","handleLocationChange","bind","handleTermChange","handleKeyPress","sortByOptions","sortByOption","e","searchYelp","preventDefault","Object","keys","sortByOptionsValue","onClick","handleSortByChange","getSortByClass","renderSortByOptions","onKeyPress","handleLocationSuggestion","Yelp","search","fetch","headers","Authorization","process","then","response","json","jsonResponse","coordinates","image_url","address1","zip_code","categories","title","review_count","require","config","App","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.321de5bb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './business.css';\r\n\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <a href={this.props.business.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <img src={this.props.business.imageSrc} alt={this.props.business.name}/>\r\n                    </a>\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{this.props.business.address}</p>\r\n                        <p>{this.props.business.city}</p>\r\n                        <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category}</h3>\r\n                        <h3 className=\"rating\">{this.props.business.rating}</h3>\r\n                        <p>{this.props.business.reviewCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './businessList.css';\r\nimport Business from '../business/business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {\r\n                    this.props.businesses.map((business) => {\r\n                        console.log(business);\r\n                        return <Business key={business.id} business={business} />;\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport PlacesAutocomplete from 'react-places-autocomplete';\r\nimport './auto.css';\r\n \r\nclass LocationSearchInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { address: '',};\r\n  }\r\n \r\n  handleChange = address => {\r\n    this.setState({ address });\r\n  };\r\n \r\n  handleSelect = address => {\r\n    this.props.locationSuggestion(address)\r\n    document.getElementsByClassName('location-search-input')[0].value = address;\r\n    this.handleChange(address);\r\n  };\r\n\r\n  handleEnter = event => {\r\n    this.props.handleSearch(event);\r\n  }\r\n \r\n  render() {\r\n    return (\r\n      <PlacesAutocomplete\r\n        value={this.state.address}\r\n        onChange={this.handleChange}\r\n        onSelect={this.handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div>\r\n            <input \r\n              {...getInputProps({\r\n                placeholder: 'Where are you located?',\r\n                className: 'location-search-input',\r\n                onKeyDown: this.handleEnter,\r\n              })}\r\n            />\r\n            <div className=\"autocomplete-dropdown-container\">\r\n              {loading && <div>Loading...</div>}\r\n              {suggestions.map(suggestion => {\r\n                const className = suggestion.active\r\n                  ? 'suggestion-item--active'\r\n                  : 'suggestion-item';\r\n                return (\r\n                  <div\r\n                    {...getSuggestionItemProps(suggestion, {\r\n                      className,\r\n                    })}\r\n                  >\r\n                    <span className=\"autocomplete-suggetions\">{suggestion.description}</span>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n    );\r\n  }\r\n}\r\nexport default LocationSearchInput;","import React from 'react';\r\nimport './searchBar.css';\r\nimport LocationSearchInput from './auto.js';\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match',\r\n        };\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n        \r\n        this.sortByOptions = {\r\n            'Best Match': 'best-match',\r\n            'Highest Rated': 'rating',\r\n            'Most Reviewed': 'review_count'\r\n        };\r\n         \r\n    }\r\n    \r\n    getSortByClass(sortByOption) {\r\n        if( this.state.sortBy === sortByOption) {\r\n            return 'active'\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({ sortBy: sortByOption });\r\n    }\r\n    handleTermChange(event) {\r\n        this.setState({ term: event.target.value });\r\n    }\r\n    handleLocationChange(event) {\r\n        this.setState({ location: event.target.value });\r\n    }\r\n    handleLocationSuggestion(address) {\r\n        this.setState({ location: address });\r\n    }\r\n    handleKeyPress(e) {\r\n        try {\r\n            if (e.key === 'Enter') {\r\n                if(this.state.location) {\r\n                    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n                }\r\n            }\r\n        }catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n    handleSearch(event) {\r\n        if(this.state.term || this.state.location) {\r\n            this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionsValue = this.sortByOptions[sortByOption];\r\n            return <li onClick={this.handleSortByChange.bind(this, sortByOptionsValue)} className={this.getSortByClass(sortByOptionsValue)} key={sortByOptionsValue}>{sortByOption}</li>;\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <span>\r\n                    <h1>Dine Around</h1>\r\n                    <div className=\"SearchBar-sort-options\">\r\n                        <ul>\r\n                            {this.renderSortByOptions()}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"SearchBar-fields\">\r\n                        <input onKeyPress={this.handleKeyPress} onChange={this.handleTermChange} placeholder=\"What are you hungry for?\" />\r\n                        <LocationSearchInput locationSuggestion={this.handleLocationSuggestion.bind(this)} handleSearch={this.handleKeyPress.bind(this)}/>\r\n                    </div>\r\n                    <div className=\"SearchBar-submit\">\r\n                        <button onClick={this.handleSearch}>Let's Go</button>\r\n                    </div>\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","const apiKey = process.env.REACT_APP_API_KEY;\r\n\r\n\r\nconst Yelp = {\r\n    search(term, location, sortBy) {\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, \r\n        { \r\n            headers: { \r\n                Authorization: `Bearer ${apiKey}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if(jsonResponse.businesses) {\r\n                return jsonResponse.businesses.map(business => {\r\n                    return {\r\n                        id: business.id,\r\n                        url: business.url,\r\n                        coordinates: business.coordinates,\r\n                        imageSrc: business.image_url,\r\n                        name: business.name,\r\n                        address: business.location.address1,\r\n                        city: business.location.city,\r\n                        state: business.location.state,\r\n                        zipCode: business.location.zip_code,\r\n                        category: business.categories[0].title,\r\n                        rating: business.rating,\r\n                        reviewCount: business.review_count\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nexport default Yelp;","import React from 'react';\r\nimport './App.css';\r\nimport BusinessList from './components/businessList/businessList';\r\nimport SearchBar from './components/searchBar/searchBar';\r\nimport Yelp from './util/Yelp';\r\nrequire('dotenv').config();\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      businesses: [],\r\n    };\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n  searchYelp(term, location, sortBy) {\r\n    Yelp.search(term,location,sortBy).then(businesses => {\r\n      this.setState({\r\n        businesses: businesses\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <SearchBar searchYelp={this.searchYelp} />\r\n        <BusinessList businesses={this.state.businesses} /> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below.\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}