{"version":3,"sources":["components/business/business.js","components/businessList/businessList.js","components/searchBar/searchBar.js","util/Yelp.js","App.js","serviceWorker.js","index.js"],"names":["Business","react_default","a","createElement","className","href","this","props","business","url","target","rel","src","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","console","log","components_business_business","key","id","SearchBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sortByOptions","Best Match","Highest Rated","Most Reviewed","term","location","sortBy","handleLocationChange","bind","assertThisInitialized","handleTermChange","handleSearch","handleKeyPress","sortByOption","setState","event","value","e","searchYelp","preventDefault","_this2","keys","sortByOptionsValue","onClick","handleSortByChange","getSortByClass","renderSortByOptions","onKeyPress","onChange","placeholder","Yelp","search","fetch","concat","headers","Authorization","then","response","json","jsonResponse","coordinates","image_url","address1","zip_code","categories","title","review_count","App","searchBar_searchBar","businessList_businessList","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cad85c7c.chunk.js","sourcesContent":["import React from 'react';\r\nimport './business.css';\r\n\r\n\r\nclass Business extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Business\">\r\n                <div className=\"image-container\">\r\n                    <a href={this.props.business.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                        <img src={this.props.business.imageSrc} alt={this.props.business.name}/>\r\n                    </a>\r\n                </div>\r\n                <h2>{this.props.business.name}</h2>\r\n                <div className=\"Business-information\">\r\n                    <div className=\"Business-address\">\r\n                        <p>{this.props.business.address}</p>\r\n                        <p>{this.props.business.city}</p>\r\n                        <p>{this.props.business.state} {this.props.business.zipCode}</p>\r\n                    </div>\r\n                    <div className=\"Business-reviews\">\r\n                        <h3>{this.props.business.category}</h3>\r\n                        <h3 className=\"rating\">{this.props.business.rating}</h3>\r\n                        <p>{this.props.business.reviewCount}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Business;","import React from 'react';\r\nimport './businessList.css';\r\nimport Business from '../business/business';\r\n\r\nclass BusinessList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"BusinessList\">\r\n                {\r\n                    this.props.businesses.map(business => {\r\n                        console.log(business);\r\n                        return <Business key={business.id} business={business} />;\r\n                    })\r\n                }\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default BusinessList;","import React from 'react';\r\nimport './searchBar.css';\r\n\r\n\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            term: '',\r\n            location: '',\r\n            sortBy: 'best_match',\r\n        };\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.handleKeyPress = this.handleKeyPress.bind(this);\r\n\r\n    }\r\n    sortByOptions = {\r\n        'Best Match': 'best-match',\r\n        'Highest Rated': 'rating',\r\n        'Most Reviewed': 'review_count'\r\n    }; \r\n    getSortByClass(sortByOption) {\r\n        if( this.state.sortBy === sortByOption) {\r\n            return 'active'\r\n        } else {\r\n            return ''\r\n        }\r\n    }\r\n    handleSortByChange(sortByOption) {\r\n        this.setState({ sortBy: sortByOption });\r\n    }\r\n    handleTermChange(event) {\r\n        this.setState({ term: event.target.value });\r\n    }\r\n    handleLocationChange(event) {\r\n        this.setState({ location: event.target.value });\r\n    }\r\n    handleKeyPress(e) {\r\n        if (e.key === 'Enter') {\r\n            if(this.state.location) {\r\n                this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n            }\r\n        }\r\n    }\r\n    handleSearch(event) {\r\n        if(this.state.term || this.state.location) {\r\n            this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    renderSortByOptions() {\r\n        return Object.keys(this.sortByOptions).map(sortByOption => {\r\n            let sortByOptionsValue = this.sortByOptions[sortByOption];\r\n            return <li onClick={this.handleSortByChange.bind(this, sortByOptionsValue)} className={this.getSortByClass(sortByOptionsValue)} key={sortByOptionsValue}>{sortByOption}</li>;\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <span>\r\n                    <h1>Dine Around</h1>\r\n                    <div className=\"SearchBar-sort-options\">\r\n                        <ul>\r\n                            {this.renderSortByOptions()}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"SearchBar-fields\">\r\n                        <input onKeyPress={this.handleKeyPress} onChange={this.handleTermChange} placeholder=\"What are you hungry for?\" />\r\n                        <input onKeyPress={this.handleKeyPress} onChange={this.handleLocationChange} placeholder=\"Where are you located?\" />\r\n                    </div>\r\n                    <div className=\"SearchBar-submit\">\r\n                        <a onClick={this.handleSearch}>Let's Go</a>\r\n                    </div>\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","const apiKey = 'I_9yi_enpmsAMSZN-FxiH3jvh8bXdfZZDBN4OHP4PDTKBasFFyx3AFdyyz5LMJb1R0bLeqzclSInvbMUkxbWjixRywXaRXkuM1IorlojS5wXzRiQKdbaqkZ6oRj8XHYx';\r\n\r\nconst Yelp = {\r\n    search(term, location, sortBy) {\r\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, \r\n        { \r\n            headers: { \r\n                Authorization: `Bearer ${apiKey}`\r\n            }\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(jsonResponse => {\r\n            if(jsonResponse.businesses) {\r\n                return jsonResponse.businesses.map(business => {\r\n                    return {\r\n                        id: business.id,\r\n                        url: business.url,\r\n                        coordinates: business.coordinates,\r\n                        imageSrc: business.image_url,\r\n                        name: business.name,\r\n                        address: business.location.address1,\r\n                        city: business.location.city,\r\n                        state: business.location.state,\r\n                        zipCode: business.location.zip_code,\r\n                        category: business.categories[0].title,\r\n                        rating: business.rating,\r\n                        reviewCount: business.review_count\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nexport default Yelp;","import React from 'react';\r\nimport './App.css';\r\nimport BusinessList from './components/businessList/businessList';\r\nimport SearchBar from './components/searchBar/searchBar';\r\nimport Yelp from './util/Yelp';\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      businesses: [],\r\n    };\r\n    this.searchYelp = this.searchYelp.bind(this);\r\n  }\r\n  searchYelp(term, location, sortBy) {\r\n    Yelp.search(term,location,sortBy).then(businesses => {\r\n      this.setState({\r\n        businesses: businesses\r\n      });\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <SearchBar searchYelp={this.searchYelp} />\r\n        <BusinessList businesses={this.state.businesses} /> \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below.\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}